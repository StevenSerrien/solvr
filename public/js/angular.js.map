{"version":3,"sources":["annotated.js"],"names":[],"mappingsfile":"angular.js","sourcesContent":["var dependencies = [\n  'sl.services',\n  'sl.directives',\n  'sl.controllers',\n\n  'ngAnimate',\n  'ngRoute',\n  'ngSanitize',\n  'angular.vertilize',\n  'ngMask',\n  'validation.match'\n];\n\nvar sl = {\n  app: angular.module('sl', dependencies),\n  controllers: angular.module('sl.controllers', []),\n  directives: angular.module('sl.directives', []),\n  services: angular.module('sl.services', [])\n};\n\nsl.app.config([\"$locationProvider\", \"$interpolateProvider\", function($locationProvider, $interpolateProvider) {\n  var supports_history_api = function() {\n    return !!(window.history && history.pushState);\n  };\n\n  $interpolateProvider.startSymbol('##');\n  $interpolateProvider.endSymbol('##');\n    if (supports_history_api()) {\n      $locationProvider.html5Mode(true);\n    } else {\n      $locationProvider.html5Mode(false);\n    }\n}]);\n\nsl.directives.directive('slAutofill', function(){\n  return function(scope, elem, attrs) {\n\n      // Fix autofill issues where Angular doesn't know about autofilled inputs\n      if(attrs.ngSubmit) {\n        setTimeout(function() {\n          elem.unbind('submit').submit(function(e) {\n            e.preventDefault();\n            elem.find('input, textarea, select').trigger('input').trigger('change').trigger('keydown');\n            scope.$apply();\n          });\n        }, 0);\n      }\n    };\n})\n\nsl.directives.directive('slPwCheck', function(){\n  return {\n      require: 'ngModel',\n      link: function (scope, elem, attrs, ctrl) {\n        var firstPassword = '#' + attrs.pwCheck;\n        elem.add(firstPassword).on('keyup', function () {\n          scope.$apply(function () {\n            var v = elem.val()===$(firstPassword).val();\n            ctrl.$setValidity('pwmatch', v);\n          });\n        });\n      }\n    }\n});\n\nsl.services.service('service', [\"$http\", \"$q\", function($http, $q){\n  this.fetch = function(method, url, data) {\n    var _promise = $q.defer();\n    $http({\n      method: method,\n      url: url,\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function(response) {\n      _promise.resolve(response.data);\n    }, function(error) {\n      _promise.reject(error);\n    });\n\n    return _promise.promise;\n  };\n\n  this.get = function(url) {\n    var data = {};\n    return this.fetch('GET', url, data);\n  };\n\n  this.post = function(url, data) {\n    return this.fetch('POST', url, data);\n  };\n}]);\n\nsl.controllers.controller('ContactSignupCtrl', [\"$scope\", \"$rootScope\", \"$location\", \"service\", \"$window\", function($scope, $rootScope, $location, service, $window) {\n  var self = this;\n\n  var savePractitioner = '/logopedist/nieuw';\n\n  this.events = {\n\n    changeTemplate: function(index) {\n      self.state.currentTemplate = self.state.templates[index];\n\n    },\n\n    updateUserData: function(index) {\n      self.events.changeTemplate(index + 1);\n\n      // Registratiestap\n      if (index == 2) {\n        self.handlers.p\n      }\n    },\n  };\n\n  this.handlers = {\n    fillTemplates: function() {\n      self.state.templates = [\n        { name: 'state-1.html', url: 'assets/templates/contact/state-1.html', index: 0, stateClass: 'state-0'},\n        { name: 'state-2.html', url: 'assets/templates/contact/state-2.html', index: 1, stateClass: 'state-1'},\n        { name: 'state-3.html', url: 'assets/templates/contact/state-3.html', index: 2 },\n        { name: 'state-4.html', url: 'assets/templates/contact/state-4.html', index: 3 },\n      ]\n      self.state.currentTemplate = self.state.templates[0];\n    },\n    postUserDataToServer: function() {\n      service.post(newPractitionerUrl, self.state.datatosend)\n    }\n  };\n\n  // listeners\n  $rootScope.$on('$locationChangeSuccess', function() {\n    self.handlers.fillTemplates();\n  });\n\n  this.state = {\n    datatosend: {\n      practice: {\n\n      },\n      user: {\n\n      },\n    },\n\n    globalForm: {},\n    animationClass: 'in-and-out',\n\n    templates: [],\n    currentTemplate: ''\n  };\n\n  var placeSearch, autocomplete;\n  var componentForm = {\n    street_number: 'short_name',\n    route: 'long_name',\n    locality: 'long_name',\n    postal_code: 'short_name'\n  };\n\n\n  this.googleHandlers = {\n    initAutocomplete: function() {\n      // Create the autocomplete object, restricting the search to geographical\n      // location types.\n      autocomplete = new google.maps.places.Autocomplete(\n          /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),\n          {\n            types: ['geocode'],\n            componentRestrictions: {country: 'be'}//Belgium only\n        });\n\n      // When the user selects an address from the dropdown, populate the address\n      // fields in the form.\n      google.maps.event.addListener(autocomplete, 'place_changed', function(){\n        var place = autocomplete.getPlace();\n\n\n\n\n        // self.state.datatosend.practice.streetname.$apply();\n        // $scope.$apply( function() {\n        // Location info\n          for (var i = 0; i < place.address_components.length; i++) {\n            var addressType = place.address_components[i].types[0];\n            if (componentForm[addressType]) {\n              var val = place.address_components[i][componentForm[addressType]];\n              self.state.datatosend.practice[addressType] = val;\n            }\n          };\n          // Lat and long\n          self.state.datatosend.practice.lat = place.geometry.location.lat();\n          self.state.datatosend.practice.lng = place.geometry.location.lng();\n\n          $scope.$digest();\n          \n        // });\n\n\n        // for (var component in componentForm) {\n        //   document.getElementById(component).value = '';\n        //   document.getElementById(component).disabled = false;\n        // }\n        //\n        // // Get each component of the address from the place details\n        // // and fill the corresponding field on the form.\n        // for (var i = 0; i < place.address_components.length; i++) {\n        //   var addressType = place.address_components[i].types[0];\n        //   if (componentForm[addressType]) {\n        //     var val = place.address_components[i][componentForm[addressType]];\n        //     document.getElementById(addressType).value = val;\n        //   }\n        //\n        // }\n\n      });\n      // autocomplete.addListener('place_changed', function() {\n      //   self.googleHandlers.fillInAdress();\n      // });\n    },\n\n    // fillInAdress: function() {\n    //   if (autocomplete.value == null || autocomplete.value == '') {\n    //     console.log('leeg');\n    //   }\n    //   else {\n    //     // Get the place details from the autocomplete object.\n    //\n    //     for (var component in componentForm) {\n    //       document.getElementById(component).value = '';\n    //       document.getElementById(component).disabled = false;\n    //     }\n    //\n    //     // Get each component of the address from the place details\n    //     // and fill the corresponding field on the form.\n    //     for (var i = 0; i < place.address_components.length; i++) {\n    //       var addressType = place.address_components[i].types[0];\n    //       if (componentForm[addressType]) {\n    //         var val = place.address_components[i][componentForm[addressType]];\n    //         document.getElementById(addressType).value = val;\n    //       }\n    //     }\n    //   }\n    //\n    //   Get the place details from the autocomplete object.\n    //   var place = autocomplete.getPlace();\n    //\n    //   for (var component in componentForm) {\n    //     document.getElementById(component).value = '';\n    //     document.getElementById(component).disabled = false;\n    //   }\n    //\n    //   // Get each component of the address from the place details\n    //   // and fill the corresponding field on the form.\n    //   for (var i = 0; i < place.address_components.length; i++) {\n    //     var addressType = place.address_components[i].types[0];\n    //     if (componentForm[addressType]) {\n    //       var val = place.address_components[i][componentForm[addressType]];\n    //       document.getElementById(addressType).value = val;\n    //     }\n    //   }\n    // },\n\n  }\n\n\n\n  /* Google Places */\n  // This example displays an address form, using the autocomplete feature\n  // of the Google Places API to help users fill in the information.\n\n  // This example requires the Places library. Include the libraries=places\n  // parameter when you first load the API. For example:\n  // <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\n\n  // var placeSearch, autocomplete;\n  // var componentForm = {\n  //   street_number: 'short_name',\n  //   route: 'long_name',\n  //   locality: 'long_name',\n  //   postal_code: 'short_name'\n  // };\n  //\n  // function initAutocomplete() {\n  //   // Create the autocomplete object, restricting the search to geographical\n  //   // location types.\n  //   autocomplete = new google.maps.places.Autocomplete(\n  //       /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),\n  //       {\n  //         types: ['geocode'],\n  //         componentRestrictions: {country: 'be'}//Belgium only\n  //     });\n  //\n  //   // When the user selects an address from the dropdown, populate the address\n  //   // fields in the form.\n  //   autocomplete.addListener('place_changed', fillInAddress);\n  // }\n  //\n  // function fillInAddress() {\n  //   // Get the place details from the autocomplete object.\n  //   var place = autocomplete.getPlace();\n  //\n  //   for (var component in componentForm) {\n  //     document.getElementById(component).value = '';\n  //     document.getElementById(component).disabled = false;\n  //   }\n  //\n  //   // Get each component of the address from the place details\n  //   // and fill the corresponding field on the form.\n  //   for (var i = 0; i < place.address_components.length; i++) {\n  //     var addressType = place.address_components[i].types[0];\n  //     if (componentForm[addressType]) {\n  //       var val = place.address_components[i][componentForm[addressType]];\n  //       document.getElementById(addressType).value = val;\n  //     }\n  //   }\n  // }\n  //\n  // // Bias the autocomplete object to the user's geographical location,\n  // // as supplied by the browser's 'navigator.geolocation' object.\n  // function geolocate() {\n  //   if (navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition(function(position) {\n  //       var geolocation = {\n  //         lat: position.coords.latitude,\n  //         lng: position.coords.longitude\n  //       };\n  //       var circle = new google.maps.Circle({\n  //         center: geolocation,\n  //         radius: position.coords.accuracy\n  //       });\n  //       autocomplete.setBounds(circle.getBounds());\n  //     });\n  //   }\n  // }\n}]);\n"]}